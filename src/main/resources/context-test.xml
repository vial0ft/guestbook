<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
    xmlns="http://www.springframework.org/schema/mvc" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <!--DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
    <!--Enables the Spring MVC @Controller programming model -->
    <annotation-driven/>
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
     up static resources in the ${webappRoot}/resources directory -->
    
<!--    <resources mapping="/resources/**" location="/resources/" />
     Resolves views selected for rendering by @Controllers to .jsp resources
                    in the /WEB-INF/views directory -->
<!--    <beans:bean
    class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>-->
    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <beans:property name="driverClassName" value="org.postgresql.Driver" />
        <beans:property
                name="url" value="jdbc:postgresql://localhost:5432/guestbook" />
        <beans:property name="username" value="postgres" />
        <beans:property name="password" value="postgres" />
    </beans:bean>

    <beans:bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <beans:property name="entityManagerFactory" ref="emf"/>
    </beans:bean>

    <tx:annotation-driven transaction-manager="transactionManager" />


    <beans:bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="jpaVendorAdapter">
            <beans:bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </beans:property>
        <beans:property name="packagesToScan" value="com.loki.work"/>
        <beans:property name="jpaProperties">
            <beans:props>
                <beans:prop key="spring.jpa.database-platform">org.hibernate.dialect.PostgreSQL9Dialect</beans:prop>
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL9Dialect</prop>-->
                <beans:prop key="hibernate.max_fetch_depth">3</beans:prop>
                <beans:prop key="hibernate.jdbc.fetch_size">50</beans:prop>
                <beans:prop key="hibernate.jdbc.batch_size">10</beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>

    <context:component-scan base-package="com.loki.work" />
</beans:beans>